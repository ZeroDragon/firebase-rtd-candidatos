extends _head.pug
block title
  title Ejercicio Frontend
block content
  h1 Ejercicio Frontend
  h3 ¿Cuál es el problema?
  ol
    li Nuestros clientes necesitan tener un lugar donde puedan hacer login con su usuario y contraseña para poder ver sus cuentas
    li Necesitamos un acceso administrador donde se puedan ver todos los usuarios y sus cuentas
  h3 ¿Qué es lo que debo hacer?
  ol
    li Crear un aplicación web en frontend usando la librería que más te guste (jquery, angular, react, vue, backbone, etc)
    li En la app debe haber un login para usuarios y un login para administradores
    li Debes manejar JWT para las secciones protegidas (<a href="https://jwt.io/introduction/" target="_blank">Documentación</a>)
    li Algunos usuarios están desactivados y regresarán un error al hacer login
    li Del lado del admin debe poder ver un listado de clientes y por cada cliente un listado de movimientos
    li Del lado del cliente debe poder ver un listado de sus movimientos
    li Todos los listados deben tener un paginador y poder ordenar los elementos por cualquier columna por su nombre
    li En el caso del listado de movimientos, debe haber un botón para convertir los pesos en dólares y viceversa
    li En esta pantalla ya está cargado axios, abre el inspector de código y prueba los ejemplos, cambiando los valores necesarios.
  h3 Material de apoyo
  p
    |Sugerimos primero hagas la sección del admin para que puedas observar los usuarios existentes, cuáles son sus correos y cuáles están activos o desactivados.
    br
    |Posteriormente hacer la sección de clientes, la cual con lo anterior resuelto es solo cambiar los endpoints y reutilizar componentes.
  p Para poder lograr esto, se hizo un API donde puedes consultar todo lo necesario:
  b
    |API URL 
    span.gray#API_URL TBD
    script document.getElementById('API_URL').outerHTML = window.location.origin
  div
    |En todos los casos de usuarios y administrador el password es 
    span.gray pruebaresuelve123 
    |(en MD5)
  div
    |El usuario de administrador es 
    span.gray admin
  div.section
    div
      b Endpoint 
      span.gray /users/adminLogin
      p Para hacer login con el administrador
    div
      b Method 
      span.gray POST
    br
    div.inputOutput
      div
        b Payload
        pre: code.
          axios.post('API_URL/users/adminLogin', {
            user: 'usuario del admin',
            password: 'password del admin'
          })
          .then(function (response) {
            console.log(response);
          })
          .catch(function (error) {
            console.log(error);
          });
      div
        b Response Success
        pre: code.
          {
            "headers": {"Authorization": "Bearer &lt;token&gt;"}
            "data": "ok",
            "status": 200
          }
      div
        b Response Error
        pre: code.
          {
            "data": "mensaje de error",
            "status": 401 o 403
          }
    div.notes
      .title Notas:
      |El token es un JWT que hay que desencriptar, en el token viene la información del usuario, ejemplo:
      pre: code.
        {
          "nombre": "Admin",
          "apellido": "Root",
          "uid": "AAAAAAAA-DDDD-MMMM-IIII-NNNNNNNNNNNN",
          "admin": true
        }
  div.section
    div
      b Endpoint 
      span.gray /users/list
      p Trae un listado paginado de los usuarios en el sistema (endpoint para admin)
    div
      b Method 
      span.gray GET
    br
    div.inputOutput
      div
        b Payload
        pre: code.
          axios.get('API_URL/users/list', {
            headers: { "Authorization": "Bearer &lt;Token&gt;" }
          })
          .then(function (response) {
            console.log(response)
          })
          .catch(function (error) {
            console.log(error)
          })
      div
        b Response Success
        pre: code.
          {
            "headers": {"Authorization": "Bearer &lt;token&gt;"}
            "data": {
              "pagination": {
                "page": 1,
                "totalPages": 10,
                "totalItems": 100,
                "hasMoreItems": true,
                "sortBy": "created_at",
                "sortDirection": "desc"
              }
              records: [
                {
                  "nombre": "Jordane",
                  "apellido": "Borer",
                  "segundo_nombre": "Sister",
                  "segundo_apellido": "",
                  "uid": "1cf80232-8758-1a10-9fbc-d34c9c6df6d1",
                  "email": "Parker_Wehner@gmail.com",
                  "active": false,
                  "created_at": "2017-08-17T11:27:18.417Z"
                }
              ]
            },
            "status": 200
          }
      div
        b Response Error
        pre: code.
          {
            "data": "mensaje de error",
            "status": 401 o 403
          }
    div.notes
      .title Notas:
      ul
        li
          |Se pueden mandar query strings a este endpoint:
          pre: code.
            page = número de página
            sortBy = ordenamiento por cualquier elemento del objeto de movimientos
            sortDirection = asc o desc

            ej: /users/list?page=2&amp;sortBy=apellido&amp;sortDirection=desc
  div.section
    div
      b Endpoint 
      span.gray /users/:user_uid/movements
      p Trae un listado paginado de los movimientos del usuario solicitado (endpoint para admin)
    div
      b Method 
      span.gray GET
    br
    div.inputOutput
      div
        b Payload
        pre: code.
          axios.get('API_URL/users/USER_UID/movements', {
            headers: { "Authorization": "Bearer &lt;Token&gt;" }
          })
          .then(function (response) {
            console.log(response)
          })
          .catch(function (error) {
            console.log(error)
          })
      div
        b Response Success
        pre: code.
          {
            "headers": {"Authorization": "Bearer &lt;token&gt;"}
            "data": {
              "pagination": {
                "page": 1,
                "totalPages": 10,
                "totalItems": 100,
                "hasMoreItems": true,
                "sortBy": "created_at",
                "sortDirection": "desc"
              }
              records: [
                {
                  "uid": "b3d573bd-2078-2cbb-510b-623ed27da7a6",
                  "account": "1cf80232-8758-1a10-9fbc-d34c9c6df6d1",
                  "amount": 297500,
                  "type": "credit",
                  "description": "Reenbolso",
                  "created_at": "2018-08-29T12:13:13.603Z"
                }
              ]
            },
            "status": 200
          }
      div
        b Response Error
        pre: code.
          {
            "data": "mensaje de error",
            "status": 401 o 403 o 404
          }
    div.notes
      .title Notas:
      ul
        li El amount está en centavos de pesos mexicanos
        li
          |Se pueden mandar query strings a este endpoint:
          pre: code.
            page = número de página
            sortBy = ordenamiento por cualquier elemento del objeto de movimientos
            sortDirection = asc o desc

            ej: /users/myMovements?page=2&amp;sortBy=amount&amp;sortDirection=desc
  div.section
    div
      b Endpoint 
      span.gray /users/login
      p Para hacer login con cualquier usuario
    div
      b Method 
      span.gray POST
    br
    div.inputOutput
      div
        b Payload
        pre: code.
          axios.post('API_URL/users/login', {
            email: 'email del usuario',
            password: 'password del usuario'
          })
          .then(function (response) {
            console.log(response);
          })
          .catch(function (error) {
            console.log(error);
          });
      div
        b Response Success
        pre: code.
          {
            "headers": {"Authorization": "Bearer &lt;token&gt;"}
            "data": "ok",
            "status": 200
          }
      div
        b Response Error
        pre: code.
          {
            "data": "mensaje de error",
            "status": 401 o 403
          }
    div.notes
      .title Notas:
      |El token es un JWT que hay que desencriptar, en el token viene la información del usuario, ejemplo:
      pre: code.
        {
          "nombre": "Jordane",
          "apellido": "Borer",
          "segundo_nombre": "Sister",
          "segundo_apellido": "",
          "uid": "1cf80232-8758-1a10-9fbc-d34c9c6df6d1",
          "email": "Parker_Wehner@gmail.com",
          "active": true,
          "created_at": "2017-08-17T11:27:18.417Z"
        }
  div.section
    div
      b Endpoint 
      span.gray /users/myMovements
      p Trae un listado paginado de los movimientos del usuario que lo solicita
    div
      b Method 
      span.gray GET
    br
    div.inputOutput
      div
        b Payload
        pre: code.
          axios.get('API_URL/users/myMovements', {
            headers: { "Authorization": "Bearer &lt;Token&gt;" }
          })
          .then(function (response) {
            console.log(response)
          })
          .catch(function (error) {
            console.log(error)
          })
      div
        b Response Success
        pre: code.
          {
            "data": {
              "pagination": {
                "page": 1,
                "totalPages": 10,
                "totalItems": 100,
                "hasMoreItems": true,
                "sortBy": "created_at",
                "sortDirection": "desc"
              }
              "records": [
                {
                  "uid": "b3d573bd-2078-2cbb-510b-623ed27da7a6",
                  "account": "1cf80232-8758-1a10-9fbc-d34c9c6df6d1",
                  "amount": 297500,
                  "type": "credit",
                  "description": "Reenbolso",
                  "created_at": "2018-08-29T12:13:13.603Z"
                }
              ]
            },
            "status": 200
          }
      div
        b Response Error
        pre: code.
          {
            "data": "mensaje de error",
            "status": 401 o 403
          }
    div.notes
      .title Notas:
      ul
        li El amount está en centavos de pesos mexicanos
        li
          |Se pueden mandar query strings a este endpoint:
          pre: code.
            page = número de página
            sortBy = ordenamiento por cualquier elemento del objeto de movimientos
            sortDirection = asc o desc

            ej: /users/myMovements?page=2&amp;sortBy=amount&amp;sortDirection=desc
  div.section
    div
      b Endpoint 
      span.gray /money/conversion
      p Trae un objeto de conversión de USD a Pesos
    div
      b Method 
      span.gray GET
    br
    div.inputOutput
      div
        b Payload
        pre: code.
          axios.get('API_URL/money/conversion')
          .then(function (response) {
            console.log(response)
          })
          .catch(function (error) {
            console.log(error)
          })
      div
        b Response Sucess
        pre: code.
          {
            "data": {
              usd2mxn: 20.136,
              mxn2usd: 0.049
            },
            "status": 200
          }
      div
        b Response Error
        pre: code.
          {
            "data": "mensaje de error",
            "status": 401 o 403
          }
